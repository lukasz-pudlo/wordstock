no such table exception problem resolved by following instructions from the answer given by aks:

https://stackoverflow.com/questions/34548768/no-such-table-exception

except that instead of makemigrations and migrate I specified makemigrations <name of app> and migrate <name of app>


Think about making the wordstock creation faster. 

Check if word already exists for this user, if yes, then don't add it.

Since the API allows you to modify the amount of results, give user the option to choose how much they want to stock and inform them that if they want to stock a lot, it might take a while.

Towards a more universal scraper:
https://hackersandslackers.com/scraping-urls-with-beautifulsoup/

For the learning part, the part where user is required to enter answers, etc. each instance of user learning, typing answers, etc. could be implemented as a model in a database with information about when that action, that learning took place, how many words were looked at, how many were answered, etc. Then the user could have a separate view, where this this information is displayed.

How to run the scraping in the background? The idea is use some kind of asynchronous solution. Most people seem to be recommeding Celery, however, it appears that it might be an overkill for what I'm trying to achieve. From what I've read, some kind of threading solution should be enough. 
Answer by nbwoodwards:
https://stackoverflow.com/questions/17601698/can-you-perform-multi-threaded-tasks-within-django

https://stackoverflow.com/questions/21945052/simple-approach-to-launching-background-task-in-django/21945663#21945663

https://www.geeksforgeeks.org/multithreaded-crawler-in-python/

The creation of wordcollection is currently handled asynchronously by celery. To activate it first run in separate terminals and having activated virtual environments and cd into wordstocksite folder:

docker run -it --rm --name rabbitmq -p 5672:5672 -p 15672:15672 rabbitmq:management

and then:

celery -A wordstocksite worker --loglevel=info -P eventlet

The above command is working but not the one suggested in Mele and Belderbos's book, which is:
celery -A wordstocksite worker -l info

At this point, the celery.py is

import os
from celery import Celery


os.environ.setdefault('DJANGO_SETTINGS_MODULE',
                      'wordstocksite.settings.local')

app = Celery('wordstocksite')
app.config_from_object('django.conf:settings', namespace='CELERY')
app.autodiscover_tasks()

It's located at the same level as settings folder in the module wordstocksite.

The __init__.py of that module is

# import celery
from .celery import app as celery_app
__all__ = ['celery_app']

There is  nothing Celery specific in either of the settings file. 

RabbitMQ is ran locally with the above command. Tasks are in the wordstock module.